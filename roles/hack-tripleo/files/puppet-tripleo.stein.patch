commit a4f49f665938b8c37405b0a47013672f813e8e60
Author: Mike Bayer <mike_mp@zzzcomputing.com>
Date:   Wed Oct 24 12:58:31 2018 -0400

    Implement Global Galera database
    
    WIP: This is the patch used from the proof of concept so far.
    Changes will include that we might want to no longer use
    the term "stretch" in favor of "global".
    
    Change-Id: Ie6364fb57524cff09f4dab99512980b091fcf8e3
    Partial: blueprint global-database

diff --git a/manifests/profile/base/database/mysql.pp b/manifests/profile/base/database/mysql.pp
index a83a1b2c..491542c7 100644
--- a/manifests/profile/base/database/mysql.pp
+++ b/manifests/profile/base/database/mysql.pp
@@ -108,6 +108,7 @@ class tripleo::profile::base::database::mysql (
   $mysql_max_connections         = hiera('mysql_max_connections', undef),
   $remove_default_accounts       = true,
   $step                          = Integer(hiera('step')),
+  $is_stretch_mysql              = false,
 ) {
 
   if $::hostname == downcase($bootstrap_node) {
@@ -196,82 +197,88 @@ class tripleo::profile::base::database::mysql (
 
   if $step >= 2 and $sync_db {
     Class['::mysql::server'] -> Mysql_database<||>
-    if hiera('aodh_api_enabled', false) {
-      include ::aodh::db::mysql
-    }
-    if hiera('ceilometer_collector_enabled', false) {
-      include ::ceilometer::db::mysql
-    }
-    if hiera('cinder_api_enabled', false) {
-      include ::cinder::db::mysql
-    }
-    if hiera('barbican_api_enabled', false) {
-      include ::barbican::db::mysql
-    }
-    if hiera('congress_enabled', false) {
-      include ::congress::db::mysql
-    }
-    if hiera('designate_api_enabled', false) {
-      include ::designate::db::mysql
-    }
-    if hiera('glance_api_enabled', false) {
-      include ::glance::db::mysql
-    }
-    if hiera('gnocchi_api_enabled', false) {
-      include ::gnocchi::db::mysql
-    }
-    if hiera('heat_engine_enabled', false) {
-      include ::heat::db::mysql
-    }
-    if hiera('ironic_api_enabled', false) {
-      include ::ironic::db::mysql
-    }
-    if hiera('ironic_inspector_enabled', false) {
-      include ::ironic::inspector::db::mysql
-    }
-    if hiera('keystone_enabled', false) {
+
+    if hiera('keystone_enabled', false) and (
+      str2bool(hiera("keystone_stretch_enabled")) == $is_stretch_mysql
+    ) {
       include ::keystone::db::mysql
     }
-    if hiera('manila_api_enabled', false) {
-      include ::manila::db::mysql
-    }
-    if hiera('mistral_api_enabled', false) {
-      include ::mistral::db::mysql
-    }
-    if hiera('neutron_api_enabled', false) {
-      include ::neutron::db::mysql
-    }
-    if hiera('nova_api_enabled', false) {
-      include ::nova::db::mysql
-      include ::nova::db::mysql_api
-    }
-    if hiera('nova_placement_enabled', false) {
-      include ::nova::db::mysql_placement
-    }
-    if hiera('octavia_api_enabled', false) {
-      include ::octavia::db::mysql
-    }
-    if hiera('sahara_api_enabled', false) {
-      include ::sahara::db::mysql
-    }
-    if hiera('tacker_enabled', false) {
-      include ::tacker::db::mysql
-    }
-    if hiera('trove_api_enabled', false) {
-      include ::trove::db::mysql
-    }
-    if hiera('panko_api_enabled', false) {
-      include ::panko::db::mysql
-    }
-    if hiera('ec2_api_enabled', false) {
-      include ::ec2api::db::mysql
-    }
-    if hiera('zaqar_api_enabled', false) and hiera('zaqar::db::mysql::user', '') == 'zaqar' {
-      # NOTE: by default zaqar uses mongodb
-      include ::zaqar::db::mysql
-    }
-    if hiera('veritas_hyperscale_controller_enabled', false) {
-      include ::veritas_hyperscale::db::mysql
+
+    if ! $is_stretch_mysql {
+      if hiera('aodh_api_enabled', false) {
+        include ::aodh::db::mysql
+      }
+      if hiera('ceilometer_collector_enabled', false) {
+        include ::ceilometer::db::mysql
+      }
+      if hiera('cinder_api_enabled', false) {
+        include ::cinder::db::mysql
+      }
+      if hiera('barbican_api_enabled', false) {
+        include ::barbican::db::mysql
+      }
+      if hiera('congress_enabled', false) {
+        include ::congress::db::mysql
+      }
+      if hiera('designate_api_enabled', false) {
+        include ::designate::db::mysql
+      }
+      if hiera('glance_api_enabled', false) {
+        include ::glance::db::mysql
+      }
+      if hiera('gnocchi_api_enabled', false) {
+        include ::gnocchi::db::mysql
+      }
+      if hiera('heat_engine_enabled', false) {
+        include ::heat::db::mysql
+      }
+      if hiera('ironic_api_enabled', false) {
+        include ::ironic::db::mysql
+      }
+      if hiera('ironic_inspector_enabled', false) {
+        include ::ironic::inspector::db::mysql
+      }
+      if hiera('manila_api_enabled', false) {
+        include ::manila::db::mysql
+      }
+      if hiera('mistral_api_enabled', false) {
+        include ::mistral::db::mysql
+      }
+      if hiera('neutron_api_enabled', false) {
+        include ::neutron::db::mysql
+      }
+      if hiera('nova_api_enabled', false) {
+        include ::nova::db::mysql
+        include ::nova::db::mysql_api
+      }
+      if hiera('nova_placement_enabled', false) {
+        include ::nova::db::mysql_placement
+      }
+      if hiera('octavia_api_enabled', false) {
+        include ::octavia::db::mysql
+      }
+      if hiera('sahara_api_enabled', false) {
+        include ::sahara::db::mysql
+      }
+      if hiera('tacker_enabled', false) {
+        include ::tacker::db::mysql
+      }
+      if hiera('trove_api_enabled', false) {
+        include ::trove::db::mysql
+      }
+      if hiera('panko_api_enabled', false) {
+        include ::panko::db::mysql
+      }
+      if hiera('ec2_api_enabled', false) {
+        include ::ec2api::db::mysql
+      }
+      if hiera('zaqar_api_enabled', false) and hiera('zaqar::db::mysql::user', '') == 'zaqar' {
+        # NOTE: by default zaqar uses mongodb
+        include ::zaqar::db::mysql
+      }
+      if hiera('veritas_hyperscale_controller_enabled', false) {
+        include ::veritas_hyperscale::db::mysql
+      }
     }
   }
 
diff --git a/manifests/profile/base/database/mysql/client.pp b/manifests/profile/base/database/mysql/client.pp
index 9e76f81f..fcd02ef0 100644
--- a/manifests/profile/base/database/mysql/client.pp
+++ b/manifests/profile/base/database/mysql/client.pp
@@ -31,10 +31,20 @@
 #   (Optional) Name of the ini section to be passed to pymysql connection strings
 #   Defaults to 'tripleo'
 #
+# [*mysql_read_stretch_group*]
+#   (Optional) Name of the ini section to be passed to pymysql connection strings
+#   for services connecting to the optional galera "stretch" service
+#   Defaults to 'tripleo-stretch'
+#
 # [*mysql_client_bind_address*]
 #   (Optional) Client IP address of the host that will be written in the mysql_read_default_file
 #   Defaults to undef
 #
+# [*mysql_stretch_bind_address*]
+#   (Optional) Client IP address of the host that will be written for the
+#   optional galera "stretch" service
+#   Defaults to undef
+#
 # [*ssl_ca*]
 #   (Optional) The SSL CA file to use to verify the MySQL server's certificate.
 #   Defaults to '/etc/pki/ca-trust/extracted/openssl/ca-bundle.trust.crt'
@@ -48,7 +58,9 @@ class tripleo::profile::base::database::mysql::client (
   $enable_ssl                = false,
   $mysql_read_default_file   = '/etc/my.cnf.d/tripleo.cnf',
   $mysql_read_default_group  = 'tripleo',
+  $mysql_read_stretch_group  = 'tripleo-stretch',
   $mysql_client_bind_address = undef,
+  $mysql_stretch_bind_address= undef,
   $ssl_ca                    = '/etc/pki/ca-trust/extracted/openssl/ca-bundle.trust.crt',
   $step                      = Integer(hiera('step')),
 ) {
@@ -63,19 +75,33 @@ class tripleo::profile::base::database::mysql::client (
       ]
     }
 
+    if is_ip_addresses($mysql_stretch_bind_address) {
+      $stretch_bind_changes = [
+        "set ${mysql_read_stretch_group}/bind-address '${mysql_stretch_bind_address}'"
+      ]
+    } else {
+      $stretch_bind_changes = [
+        "rm ${mysql_read_stretch_group}/bind-address"
+      ]
+    }
+
     if $enable_ssl {
       $changes_ssl = [
         "set ${mysql_read_default_group}/ssl '1'",
-        "set ${mysql_read_default_group}/ssl-ca '${ssl_ca}'"
+        "set ${mysql_read_default_group}/ssl-ca '${ssl_ca}'",
+        "set ${mysql_read_stretch_group}/ssl '1'",
+        "set ${mysql_read_stretch_group}/ssl-ca '${ssl_ca}'"
       ]
     } else {
       $changes_ssl = [
         "rm ${mysql_read_default_group}/ssl",
-        "rm ${mysql_read_default_group}/ssl-ca"
+        "rm ${mysql_read_default_group}/ssl-ca",
+        "rm ${mysql_read_stretch_group}/ssl",
+        "rm ${mysql_read_stretch_group}/ssl-ca"
       ]
     }
 
-    $conf_changes = union($client_bind_changes, $changes_ssl)
+    $conf_changes = union($client_bind_changes, $stretch_bind_changes, $changes_ssl)
 
     # Create /etc/my.cnf.d/tripleo.cnf
     # If the folder /etc/my.cnf.d does not exist (e.g. if mariadb is not
diff --git a/manifests/profile/pacemaker/database/stretch_mysql_bundle.pp b/manifests/profile/pacemaker/database/stretch_mysql_bundle.pp
new file mode 100644
index 00000000..8f552e54
--- /dev/null
+++ b/manifests/profile/pacemaker/database/stretch_mysql_bundle.pp
@@ -0,0 +1,506 @@
+# Copyright 2017 Red Hat, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License"); you may
+# not use this file except in compliance with the License. You may obtain
+# a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+# License for the specific language governing permissions and limitations
+# under the License.
+#
+# == Class: tripleo::profile::pacemaker::mysql_bundle
+#
+# Containerized Mysql Pacemaker HA profile for tripleo
+#
+# === Parameters
+#
+# [*mysql_docker_image*]
+#   (Optional) The docker image to use for creating the pacemaker bundle
+#   Defaults to hiera('tripleo::profile::pacemaker::database::mysql_bundle::mysql_docker_image', undef)
+#
+# [*control_port*]
+#   (Optional) The bundle's pacemaker_remote control port on the host
+#   Defaults to hiera('tripleo::profile::pacemaker::database::mysql_bundle::control_port', '3150')
+#
+# [*bootstrap_node*]
+#   (Optional) The hostname of the node responsible for bootstrapping tasks
+#   Defaults to hiera('mysql_short_bootstrap_node_name')
+#
+# [*bind_address*]
+#   (Optional) The address that the local mysql instance should bind to.
+#   Defaults to $::hostname
+#
+# [*ca_file*]
+#   (Optional) The path to the CA file that will be used for the TLS
+#   configuration. It's only used if internal TLS is enabled.
+#   Defaults to undef
+#
+# [*certificate_specs*]
+#   (Optional) The specifications to give to certmonger for the certificate
+#   it will create. Note that the certificate nickname must be 'mysql' in
+#   the case of this service.
+#   Example with hiera:
+#     tripleo::profile::base::database::mysql::certificate_specs:
+#       hostname: <overcloud controller fqdn>
+#       service_certificate: <service certificate path>
+#       service_key: <service key path>
+#       principal: "mysql/<overcloud controller fqdn>"
+#   Defaults to hiera('tripleo::profile::base::database::mysql::certificate_specs', {}).
+#
+# [*enable_internal_tls*]
+#   (Optional) Whether TLS in the internal network is enabled or not.
+#   Defaults to hiera('enable_internal_tls', false)
+#
+# [*gmcast_listen_addr*]
+#   (Optional) This variable defines the address on which the node listens to
+#   connections from other nodes in the cluster.
+#   Defaults to hiera('mysql_bind_host')
+#
+# [*innodb_flush_log_at_trx_commit*]
+#   (Optional) Disk flush behavior for MySQL under Galera.  A value of
+#   '1' indicates flush to disk per transaction.   A value of '2' indicates
+#   flush to disk every second, flushing all unflushed transactions in
+#   one step.
+#   Defaults to hiera('innodb_flush_log_at_trx_commit', '1')
+#
+# [*sst_tls_cipher*]
+#   (Optional) When enable_internal_tls is true, defines the list of
+#   ciphers that the socat may use to tunnel SST connections.
+#   Defaults to '!SSLv2:kEEH:kRSA:kEDH:kPSK:+3DES:!aNULL:!eNULL:!MD5:!EXP:!RC4:!SEED:!IDEA:!DES'
+#
+# [*sst_tls_options*]
+#   (Optional) When enable_internal_tls is true, defines additional
+#   parameters to be passed to socat for tunneling SST connections.
+#   Defaults to undef
+#
+# [*ipv6*]
+#   (Optional) Whether to deploy MySQL on IPv6 network.
+#   Defaults to str2bool(hiera('mysql_ipv6', false))
+#
+# [*pcs_tries*]
+#   (Optional) The number of times pcs commands should be retried.
+#   Defaults to hiera('pcs_tries', 20)
+#
+#
+# [*step*]
+#   (Optional) The current step in deployment. See tripleo-heat-templates
+#   for more details.
+#   Defaults to hiera('step')
+#
+#
+class tripleo::profile::pacemaker::database::stretch_mysql_bundle (
+  $mysql_docker_image             = hiera('tripleo::profile::pacemaker::database::stretch_mysql_bundle::mysql_docker_image', undef),
+  $control_port                   = hiera('tripleo::profile::pacemaker::database::stretch_mysql_bundle::control_port', '3150'),
+  $bootstrap_node                 = hiera('mysql_short_bootstrap_node_name'),
+  $bind_address                   = hiera('tripleo::profile::pacemaker::database::stretch_mysql_bundle::bind_address', $::hostname),
+  $ca_file                        = undef,
+  $certificate_specs              = hiera('tripleo::profile::base::database::mysql::certificate_specs', {}),
+  $enable_internal_tls            = hiera('enable_internal_tls', false),
+  $gmcast_listen_addr             = hiera('stretch_mysql_bind_host'),
+  $innodb_flush_log_at_trx_commit = hiera('innodb_flush_log_at_trx_commit', '1'),
+  $stretch_mysql_max_connections  = hiera('stretch_mysql_max_connections', undef),
+  $sst_tls_cipher                 = '!SSLv2:kEEH:kRSA:kEDH:kPSK:+3DES:!aNULL:!eNULL:!MD5:!EXP:!RC4:!SEED:!IDEA:!DES',
+  $sst_tls_options                = undef,
+  $ipv6                           = str2bool(hiera('mysql_ipv6', false)),
+  $pcs_tries                      = hiera('pcs_tries', 20),
+  $step                           = Integer(hiera('step')),
+) {
+  if $::hostname == downcase($bootstrap_node) {
+    $pacemaker_master = true
+  } else {
+    $pacemaker_master = false
+  }
+
+  # pacemaker node names, local only
+  $local_node_names_lookup = hiera('stretch_mysql_short_node_names', [$::hostname])
+
+  # hostnames (DNS names or IP numbers), local only
+  $local_node_fqdns_names_lookup = hiera('stretch_mysql_node_names', [$::hostname])
+
+  # remote and possibly local node names
+  $remote_local_node_names = hiera('stretch_mysql_remote_node_names', [])
+
+  # remote and possibly local hostnames
+  $remote_local_fqdns_names = hiera('stretch_mysql_remote_node_fqdns_names', [])
+
+  # map of node->hostname which includes remote plus may include local
+  $remote_local_node_map_array = zip($remote_local_node_names, $remote_local_fqdns_names)
+
+  # remote node map that includes only remote, filter out for
+  # node name in local node names lookup.  by filtering the map this
+  # also filters out the fqdns names which might not match up with each
+  # other as well
+  $remote_node_map_array = $remote_local_node_map_array.filter |$i| {
+    ! ($i[0] in $local_node_names_lookup)
+  }
+
+  # create remote node map
+  # remote node array is pacemaker name to "root@hostname", e.g. an SSH string,
+  # or whatever we decide the stretch resource agent will use for remote pacemaker
+  # communication
+  # <remote_node>:root@<remote_hostname>;<remote_node>:root@<remote_hostname>
+  $remote_node_map_strings = $remote_node_map_array.map |$i| {
+    "${i[0]}:root@${i[1]}"
+  }
+  $remote_node_map_string = join($remote_node_map_strings, ';')
+
+  # array of remote only node names
+  $remote_node_names_lookup = $remote_node_map_array.map |$i| {
+      $i[0]
+  }
+
+  # array of remote only fqdns names
+  $remote_node_fqdns_names_lookup = $remote_node_map_array.map |$i| {
+      $i[1]
+  }
+
+  # all galera node names that would be in gcomm://
+  $galera_node_names_lookup = downcase(
+      concat(
+          $local_node_names_lookup,
+          $remote_node_names_lookup
+      )
+  )
+
+  # all hostnames that would be in the cluster_host_map
+  $galera_fqdns_names_lookup = downcase(
+      concat(
+        $local_node_fqdns_names_lookup,
+        $remote_node_fqdns_names_lookup
+      )
+  )
+
+  # construct a galera-pacemaker name mapping for the resource agent
+  # this has to accommodate for both local and remote nodes
+  # [galera-0:galera-0.internalapi.local, ...]
+  $host_map_array_tmp = zip($galera_node_names_lookup, $galera_fqdns_names_lookup)
+  $host_map_array = $host_map_array_tmp.map |$i| {
+    "${i[0]}:${i[1]}"
+  }
+  $cluster_host_map_string = join($host_map_array, ';')
+
+  # all galera nodes for gcomm://
+  # this includes local and remote
+  $galera_nodes = join($galera_fqdns_names_lookup, ',')
+
+  # number of pacemaker nodes we will have locally
+  $local_galera_nodes_count = count($local_node_fqdns_names_lookup)
+
+  # safe to bootstrap node names, to allow bootstrap of the first overcloud
+  $stretch_mysql_bootstrap_galera_nodes = hiera('stretch_mysql_bootstrap_galera_nodes', [])
+
+  # for safe to bootstrap, filter those nodes based on what we have locally
+  $stretch_mysql_bootstrap_galera_nodes_local = $stretch_mysql_bootstrap_galera_nodes.filter |$i| {
+    ($i in $local_node_names_lookup)
+  }
+  $stretch_mysql_bootstrap_galera_nodes_string = join($stretch_mysql_bootstrap_galera_nodes_local, ',')
+
+  if $enable_internal_tls {
+    $tls_certfile = $certificate_specs['service_certificate']
+    $tls_keyfile = $certificate_specs['service_key']
+    $sst_tls = {
+      'tcert' => $tls_certfile,
+      'tkey' => $tls_keyfile,
+    }
+    if $ca_file {
+      $tls_ca_options = "socket.ssl_ca=${ca_file}"
+      $sst_tca = { 'tca' => $ca_file }
+    } else {
+      $tls_ca_options = ''
+      $sst_tca = {}
+    }
+    $tls_options = "socket.ssl_key=${tls_keyfile};socket.ssl_cert=${tls_certfile};${tls_ca_options};"
+    $wsrep_sst_method = 'rsync_tunnel'
+    if $ipv6 {
+      $sst_ipv6 = 'pf=ip6'
+    } else {
+      $sst_ipv6 = undef
+    }
+    $all_sst_options = ["cipher=${sst_tls_cipher}", $sst_tls_options, $sst_ipv6]
+    $sst_sockopt = {
+      'sockopt' => join(delete_undef_values($all_sst_options), ',')
+    }
+    $mysqld_options_sst = { 'sst' => merge($sst_tls, $sst_tca, $sst_sockopt) }
+  } else {
+    $tls_options = ''
+    $wsrep_sst_method = 'rsync'
+    $mysqld_options_sst = {}
+  }
+
+  $mysqld_options_mysqld = {
+    'mysqld' => {
+      'pid-file'                       => '/var/lib/mysql/mariadb.pid',
+      'skip-name-resolve'              => '1',
+      'binlog_format'                  => 'ROW',
+      'default-storage-engine'         => 'innodb',
+      'innodb_autoinc_lock_mode'       => '2',
+      'innodb_locks_unsafe_for_binlog' => '1',
+      'innodb_file_per_table'          => 'ON',
+      'innodb_flush_log_at_trx_commit' => $innodb_flush_log_at_trx_commit,
+      'query_cache_size'               => '0',
+      'query_cache_type'               => '0',
+      'bind-address'                   => $bind_address,
+      'max_connections'                => $stretch_mysql_max_connections,
+      'open_files_limit'               => '-1',
+      'wsrep_on'                       => 'ON',
+      'wsrep_provider'                 => '/usr/lib64/galera/libgalera_smm.so',
+      'wsrep_cluster_name'             => 'galera_cluster',
+      'wsrep_cluster_address'          => "gcomm://${galera_nodes}",
+      'wsrep_slave_threads'            => '1',
+      'wsrep_certify_nonPK'            => '1',
+      'wsrep_debug'                    => '0',
+      'wsrep_convert_LOCK_to_trx'      => '0',
+      'wsrep_retry_autocommit'         => '1',
+      'wsrep_auto_increment_control'   => '1',
+      'wsrep_drupal_282555_workaround' => '0',
+      'wsrep_causal_reads'             => '0',
+      'wsrep_sst_method'               => $wsrep_sst_method,
+      'wsrep_provider_options'         => "gmcast.listen_addr=tcp://${gmcast_listen_addr}:4567;${tls_options}",
+    },
+    'mysqld_safe' => {
+      'pid-file'                       => '/var/lib/mysql/mariadb.pid',
+    }
+  }
+
+  $mysqld_options = merge($mysqld_options_mysqld, $mysqld_options_sst)
+
+  # remove_default_accounts parameter will execute some mysql commands
+  # to remove the default accounts created by MySQL package.
+  # We need MySQL running to run the commands successfully, so better to
+  # wait step 2 before trying to run the commands.
+  if $step >= 2 and $pacemaker_master {
+    $remove_default_accounts = true
+  } else {
+    $remove_default_accounts = false
+  }
+
+  if $step >= 1 and $pacemaker_master and hiera('stack_action') == 'UPDATE' {
+    tripleo::pacemaker::resource_restart_flag { 'galera-master':
+      subscribe => File['mysql-config-file'],
+    }
+  }
+
+  $mysql_root_password = hiera('mysql::server::root_password')
+
+  if $step >= 1 {
+    # Kolla sets the root password, expose it to the MySQL package
+    # so that it can initialize the database (e.g. create users)
+    file { '/root/.my.cnf' :
+      ensure  => file,
+      mode    => '0600',
+      owner   => 'root',
+      group   => 'root',
+      content => "[client]
+user=root
+password=\"${mysql_root_password}\"
+
+[mysql]
+user=root
+password=\"${mysql_root_password}\"",
+    }
+
+    # Resource agent uses those credentials to poll galera state
+    file { '/etc/sysconfig/clustercheck' :
+      ensure  => file,
+      mode    => '0600',
+      owner   => 'root',
+      group   => 'root',
+      content => "MYSQL_USERNAME=root\n
+MYSQL_PASSWORD='${mysql_root_password}'\n
+MYSQL_HOST=localhost\n",
+    }
+  }
+
+  if $step >= 2 {
+    # need that class to create all openstack credentials
+    # we don't include it in step 1 because the kolla bootstrap
+    # happens after step 1 baremetal
+    class { '::tripleo::profile::base::database::mysql':
+      bootstrap_node          => $bootstrap_node,
+      manage_resources        => false,
+      remove_default_accounts => $remove_default_accounts,
+      mysql_server_options    => $mysqld_options,
+      is_stretch_mysql        => true,
+    }
+
+    if $pacemaker_master {
+      $mysql_short_node_names = hiera('mysql_short_node_names')
+      $mysql_short_node_names.each |String $node_name| {
+        # lint:ignore:puppet-lint-2.0.1 does not work with multiline strings
+        # and blocks (remove this when we move to 2.2.0 where this works)
+        pacemaker::property { "stretch-galera-role-${node_name}":
+          property => 'stretch-galera-role',
+          value    => true,
+          tries    => $pcs_tries,
+          node     => $node_name,
+          before   => Pacemaker::Resource::Bundle['stretch-galera-bundle'],
+        }
+        # lint:endignore
+      }
+
+      # set local safe to bootstrap flag if indicated for local nodes
+      $stretch_mysql_bootstrap_galera_nodes_local.each |String $node_name| {
+          # lint:ignore:puppet-lint-2.0.1 does not work with multiline strings
+          # and blocks (remove this when we move to 2.2.0 where this works)
+          pacemaker::property { "stretch-galera-initial-bootstrap-${node_name}":
+            property => "stretch-galera-initial-bootstrap",
+            value    => true,
+            tries    => $pcs_tries,
+            node     => $node_name,
+            before   => Pacemaker::Resource::Bundle['stretch-galera-bundle'],
+          }
+          # lint:endignore
+      }
+
+
+      $storage_maps = {
+        'stretch-mysql-cfg-files'   => {
+          'source-dir' => '/var/lib/kolla/config_files/mysql.json',
+          'target-dir' => '/var/lib/kolla/config_files/config.json',
+          'options'    => 'ro',
+        },
+        'stretch-mysql-cfg-data'    => {
+          'source-dir' => '/var/lib/config-data/puppet-generated/stretch_mysql/',
+          'target-dir' => '/var/lib/kolla/config_files/src',
+          'options'    => 'ro',
+        },
+        'stretch-mysql-hosts'       => {
+          'source-dir' => '/etc/hosts',
+          'target-dir' => '/etc/hosts',
+          'options'    => 'ro',
+        },
+        'stretch-mysql-localtime'   => {
+          'source-dir' => '/etc/localtime',
+          'target-dir' => '/etc/localtime',
+          'options'    => 'ro',
+        },
+        'stretch-mysql-lib'         => {
+          'source-dir' => '/var/lib/stretch_mysql',
+          'target-dir' => '/var/lib/mysql',
+          'options'    => 'rw',
+        },
+        # NOTE: we cannot remove this bind mount until the resource-agent
+        # can use the configured log-file for initial bootstrap operations
+        'stretch-mysql-log-mariadb' => {
+          'source-dir' => '/var/log/stretch_mariadb',
+          'target-dir' => '/var/log/mariadb',
+          'options'    => 'rw',
+        },
+        'stretch-mysql-log'         => {
+          'source-dir' => '/var/log/containers/stretch_mysql',
+          'target-dir' => '/var/log/mysql',
+          'options'    => 'rw',
+        },
+        'stretch-mysql-dev-log'     => {
+          'source-dir' => '/dev/log',
+          'target-dir' => '/dev/log',
+          'options'    => 'rw',
+        },
+        'stretch-galera-root-ssh' => {
+          'source-dir' => '/var/lib/stretch_mysql_ssh',
+          'target-dir' => '/root/.ssh',
+          'options'    => 'ro'
+        }
+      }
+
+      if $enable_internal_tls {
+        $mysql_storage_maps_tls = {
+          'stretch-mysql-pki-gcomm-key'  => {
+            'source-dir' => '/etc/pki/tls/private/mysql.key',
+            'target-dir' => '/var/lib/kolla/config_files/src-tls/etc/pki/tls/private/mysql.key',
+            'options'    => 'ro',
+          },
+          'stretch-mysql-pki-gcomm-cert' => {
+            'source-dir' => '/etc/pki/tls/certs/mysql.crt',
+            'target-dir' => '/var/lib/kolla/config_files/src-tls/etc/pki/tls/certs/mysql.crt',
+            'options'    => 'ro',
+          },
+        }
+        if $ca_file {
+          $ca_storage_maps_tls = {
+            'stretch-mysql-pki-gcomm-ca' => {
+              'source-dir' => $ca_file,
+              'target-dir' => "/var/lib/kolla/config_files/src-tls${ca_file}",
+              'options'    => 'ro',
+            },
+          }
+        } else {
+          $ca_storage_maps_tls = {}
+        }
+        $storage_maps_tls = merge($mysql_storage_maps_tls, $ca_storage_maps_tls)
+      } else {
+        $storage_maps_tls = {}
+      }
+
+      pacemaker::resource::bundle { 'stretch-galera-bundle':
+        image             => $mysql_docker_image,
+        replicas          => $local_galera_nodes_count,
+        masters           => $local_galera_nodes_count,
+        location_rule     => {
+          resource_discovery => 'exclusive',
+          score              => 0,
+          expression         => ['stretch-galera-role eq true'],
+        },
+
+        container_options => 'network=host',
+        options           => '--user=root --log-driver=journald -e KOLLA_CONFIG_STRATEGY=COPY_ALWAYS',
+        run_command       => '/bin/bash /usr/local/bin/kolla_start',
+        network           => "control-port=${control_port}",
+        storage_maps      => merge($storage_maps, $storage_maps_tls),
+      }
+
+      pacemaker::resource::ocf { 'stretch-galera':
+        ocf_agent_name  => 'heartbeat:stretch_galera',
+        master_params   => '',
+        meta_params     => "master-max=${local_galera_nodes_count} ordered=true container-attribute-target=host",
+        op_params       => 'promote timeout=300s on-fail=block',
+        resource_params => "log='/var/log/mysql/mysqld.log' additional_parameters='--open-files-limit=16384' enable_creation=true wsrep_cluster_address='gcomm://${galera_nodes}' cluster_host_map='${cluster_host_map_string}' remote_node_map='${remote_node_map_string}'",
+        tries           => $pcs_tries,
+        location_rule   => {
+          resource_discovery => 'exclusive',
+          score              => 0,
+          expression         => ['stretch-galera-role eq true'],
+        },
+        bundle          => 'stretch-galera-bundle',
+        require         => [Class['::mysql::server'],
+                            Pacemaker::Resource::Bundle['stretch-galera-bundle']],
+        before          => Exec['galera-ready'],
+      }
+
+      exec { 'galera-ready' :
+        command     => '/usr/bin/clustercheck >/dev/null',
+        timeout     => 30,
+        tries       => 180,
+        try_sleep   => 10,
+        environment => ['AVAILABLE_WHEN_READONLY=0'],
+        tag         => 'galera_ready',
+      }
+
+      # We create databases and users for services at step 2 as well. This ensures
+      # Galera is up and ready before those get created
+      File['/root/.my.cnf'] -> Mysql_database<||>
+      File['/root/.my.cnf'] -> Mysql_user<||>
+      File['/etc/sysconfig/clustercheck'] -> Mysql_database<||>
+      File['/etc/sysconfig/clustercheck'] -> Mysql_user<||>
+      Exec['galera-ready'] -> Mysql_database<||>
+      Exec['galera-ready'] -> Mysql_user<||>
+
+      # reset local safe to bootstrap flag
+      $stretch_mysql_bootstrap_galera_nodes_local.each |String $node_name| {
+          exec { "stretch-galera-initial-bootstrap-absent-${node_name}":
+            command   => "/sbin/crm_attribute --node ${node_name} --name stretch-galera-initial-bootstrap -D",
+            tries     => $pcs_tries,
+            try_sleep => 2,
+            timeout   => 30,
+            require   => Exec['galera-ready'],
+            tag       => 'galera_ready'
+          }
+      }
+
+    }
+  }
+}
diff --git a/manifests/profile/pacemaker/stretch_clustercheck.pp b/manifests/profile/pacemaker/stretch_clustercheck.pp
new file mode 100644
index 00000000..56f9d887
--- /dev/null
+++ b/manifests/profile/pacemaker/stretch_clustercheck.pp
@@ -0,0 +1,70 @@
+# Copyright 2016 Red Hat, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License"); you may
+# not use this file except in compliance with the License. You may obtain
+# a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+# License for the specific language governing permissions and limitations
+# under the License.
+#
+# == Class: tripleo::profile::pacemaker::stretch_clustercheck
+#
+# Clustercheck, galera health check profile for tripleo
+#
+# === Parameters
+# [*step*]
+#   (Optional) The current step in deployment. See tripleo-heat-templates
+#   for more details.
+#   Defaults to hiera('step')
+#
+# [*bind_address*]
+#   (Optional) The address that the local mysql instance should bind to.
+#   Defaults to hiera('stretch_mysql_bind_host')
+#
+# [*clustercheck_user*]
+#   (Optional) The name of the clustercheck user.
+#   Defaults to 'clustercheck'
+#
+# [*clustercheck_password*]
+#   (Optional) The password for the clustercheck user.
+#   Defaults to hiera('mysql_clustercheck_password')
+#
+#
+class tripleo::profile::pacemaker::stretch_clustercheck (
+  $step                  = Integer(hiera('step')),
+  $clustercheck_user     = 'clustercheck',
+  $clustercheck_password = hiera('mysql_clustercheck_password'),
+  $bind_address          = hiera('stretch_mysql_bind_host'),
+) {
+
+  if $step >= 1 {
+    file { '/etc/sysconfig/clustercheck' :
+      ensure  => file,
+      mode    => '0600',
+      owner   => 'mysql',
+      group   => 'mysql',
+      content => "MYSQL_USERNAME=${clustercheck_user}\n
+MYSQL_PASSWORD='${clustercheck_password}'\n
+MYSQL_HOST=localhost\n",
+    }
+
+    # the clustercheck service is run via xinet in the container
+    xinetd::service { 'galera-monitor' :
+      bind           => $bind_address,
+      port           => '9200',
+      server         => '/usr/bin/clustercheck',
+      per_source     => 'UNLIMITED',
+      log_on_success => '',
+      log_on_failure => 'HOST',
+      flags          => 'REUSE',
+      service_type   => 'UNLISTED',
+      user           => 'mysql',
+      group          => 'mysql',
+    }
+  }
+}
