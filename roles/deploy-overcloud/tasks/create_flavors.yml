
- name: Use instackenv provided
  set_fact:
    instack_file: "{{ working_dir }}/instackenv.json"

# replace with os_ modules once shade group will be available
- name: read all flavors
  shell: |
      source {{ working_dir }}/stackrc
      openstack flavor list | awk  'FNR>3 {print $4}' | sed '/^\s*$/d'
  register: existing_flavors
  tags: skip_ansible_lint

- name: remove all the flavors
  shell: |
      source {{ working_dir }}/stackrc
      openstack flavor delete {{ item }}
  with_items: "{{ existing_flavors.stdout_lines }}"
  ignore_errors: yes
  tags: skip_ansible_lint
  register: flavor_delete

- name: Workarond for BZ #1317312
  shell: |
      source {{ working_dir }}/stackrc
      nova flavor-delete {{ item[0] }}
  tags: skip_ansible_lint
  when: "'public endpoint for messaging service not found' in item[1].stderr "
  with_together:
      - "{{ existing_flavors.stdout_lines }}"
      - "{{ flavor_delete.results }}"
  ignore_errors: yes

- name: create the baremetal flavor for our machines
  shell: |
      source {{ working_dir }}/stackrc
      openstack flavor create --id auto --ram 4096 --disk 16 --vcpus 1 baremetal
  tags: skip_ansible_lint
  register: bm_result
  ignore_errors: yes
  failed_when: "bm_result.rc != 0 and bm_result.stderr.find('Flavor with name baremetal already exists') != -1"

- name: read instackenv file
  command: cat "{{ instack_file }}"
  register: overcloud_hosts_facts

- set_fact:
      overcloud_facts: "{{ overcloud_hosts_facts.stdout | from_json }}"

- block:
      - name: check for original flavors
        shell: >
            source {{ working_dir }}/stackrc;
            openstack flavor list | awk '/{{ item_name }}/ {print $4}'
        vars:
          item_name: "{{ item.name | regex_replace('(?:s1|s2)(.+?)-\\d', '\\1') }}"
        with_items: "{{ overcloud_facts.nodes | default([]) }}"
        register: original_flavors

      # Remember, hostvars are special: https://github.com/ansible/ansible/issues/13838, https://github.com/ansible/ansible/issues/21084
      - name: create the flavors for our machines
        vars:
            flv_min_disk_size: 6
            flv_min_cpu: 1
            searched_string: "Flavor with name {{ item.name }} already exists"
            item_name: "{{ item.name | regex_replace('(?:s1|s2)(.+?)-\\d', '\\1') }}"
        shell: >
            source {{ working_dir }}/stackrc;
            openstack flavor create
            --id auto
            --ram {{ (hostvars[item.name] | default({})).ram | default(item.memory) }}
            --disk {{ [((hostvars[item.name] | default({})).disk | default(item.disk) | int) - 3, flv_min_disk_size] | max }}
            --vcpus {{ [((hostvars[item.name] | default({})).vcpus | default(item.cpu) | int) - 1, flv_min_cpu] | max }}
            {{ item_name }}
        register: flavor_result
        failed_when: flavor_result.rc != 0 and flavor_result.stderr.find(searched_string) != -1
        with_items: "{{ overcloud_facts.nodes | default([]) }}"

      - name: get the node UUID
        shell: |
            source {{ working_dir }}/stackrc;
            ironic node-list | grep -w {{ item.name | default(item) }} | awk '{print $2}'
        with_items: "{{ overcloud_facts.nodes | default([])}}"
        register: node_list
  when: "overcloud_facts.nodes[0].name is defined"

- set_fact:
      tagged_flavors: "{{ flavor_result.results }}"

- name: set additional properties
  shell: |
      source {{ working_dir }}/stackrc;
      openstack flavor set --property 'cpu_arch'='x86_64' --property 'capabilities:boot_option'='local' --property 'capabilities:profile'='{{ item.cmd.split() | last }}' {{ item.cmd.split() | last }}
  tags: skip_ansible_lint
  when: item.cmd is defined
  with_items: "{{ tagged_flavors | default([]) }}"

- name: tag our nodes with the proper profile
  shell: |
      source {{ working_dir }}/stackrc;
      ironic node-update {{ item[0].stdout }} add properties/capabilities='profile:{{ item[1].cmd.split() | last }},boot_option:local'
  vars:
    item_name: "{{ item[0].item.name | regex_replace('(?:s1|s2)(.+?)-\\d', '\\1') }}"
  tags: skip_ansible_lint
  when: "item[0].item.name is defined and item[1].cmd is defined and item_name in item[1].cmd"
  with_together:
      - "{{ node_list.results }}"
      - "{{ tagged_flavors | default([]) }}"
