
- name: Use instackenv provided
  set_fact:
    instack_file: "{{ working_dir }}/instackenv.json"

# replace with os_ modules once shade group will be available
- name: read all flavors
  shell: |
      source {{ working_dir }}/stackrc
      openstack flavor list | awk  'FNR>3 {print $4}' | sed '/^\s*$/d'
  register: existing_flavors
  tags: skip_ansible_lint

- name: remove all the flavors
  shell: |
      source {{ working_dir }}/stackrc
      openstack flavor delete {{ item }}
  with_items: "{{ existing_flavors.stdout_lines }}"
  ignore_errors: yes
  tags: skip_ansible_lint
  register: flavor_delete

- name: Workarond for BZ #1317312
  shell: |
      source {{ working_dir }}/stackrc
      nova flavor-delete {{ item[0] }}
  tags: skip_ansible_lint
  when: "'public endpoint for messaging service not found' in item[1].stderr "
  with_together:
      - "{{ existing_flavors.stdout_lines }}"
      - "{{ flavor_delete.results }}"
  ignore_errors: yes

- name: create the baremetal flavor for our machines
  shell: |
      source {{ working_dir }}/stackrc
      openstack flavor create --id auto --ram 4096 --disk 16 --vcpus 1 baremetal
  tags: skip_ansible_lint
  register: bm_result
  ignore_errors: yes
  failed_when: "bm_result.rc != 0 and bm_result.stderr.find('Flavor with name baremetal already exists') != -1"

- name: read instackenv file
  command: cat "{{ instack_file }}"
  register: overcloud_hosts_facts

- set_fact:
      overcloud_facts: "{{ overcloud_hosts_facts.stdout | from_json }}"

- block:
      - name: check for original flavors
        shell: >
            source {{ working_dir }}/stackrc;
            openstack flavor list | awk '/{{ item_name }}/ {print $4}'
        vars:
          # note this is custom for our naming convention
          item_name: "{{ item.name | regex_replace('(.+?)-\\d', '\\1') }}"
        with_items: "{{ overcloud_facts.nodes | default([]) }}"
        register: original_flavors

      # Remember, hostvars are special: https://github.com/ansible/ansible/issues/13838, https://github.com/ansible/ansible/issues/21084
      - name: create the flavors for our machines
        vars:
            flv_min_disk_size: 6
            flv_min_cpu: 1
            searched_string: "Flavor with name {{ item.name }} already exists"
            # note this is custom for our naming convention
            item_name: "{{ item.name | regex_replace('(.+?)-\\d', '\\1') }}"
        shell: >
            source {{ working_dir }}/stackrc;
            openstack flavor create
            --id auto
            --ram {{ (hostvars[item.name] | default({})).ram | default(item.memory) }}
            --disk {{ [((hostvars[item.name] | default({})).disk | default(item.disk) | int) - 3, flv_min_disk_size] | max }}
            --vcpus {{ [((hostvars[item.name] | default({})).vcpus | default(item.cpu) | int) - 1, flv_min_cpu] | max }}
            {{ item_name }}
        register: flavor_result
        failed_when: flavor_result.rc != 0 and flavor_result.stderr.find(searched_string) != -1
        with_items: "{{ overcloud_facts.nodes | default([]) }}"

      - name: get the node UUID
        shell: |
            source {{ working_dir }}/stackrc;
            openstack baremetal node list | grep -w {{ item.name | default(item) }} | awk '{print $2}'
        with_items: "{{ overcloud_facts.nodes | default([])}}"
        register: node_list
  when: "overcloud_facts.nodes[0].name is defined"

- set_fact:
      tagged_flavors: "{{ flavor_result.results }}"

- name: set additional properties
  shell: |
      source {{ working_dir }}/stackrc;
      openstack flavor set --property 'cpu_arch'='x86_64' --property 'capabilities:boot_option'='local' --property 'capabilities:profile'='{{ item.cmd.split() | last }}' {{ item.cmd.split() | last }}
  tags: skip_ansible_lint
  when: item.cmd is defined
  with_items: "{{ tagged_flavors | default([]) }}"

- name: tag our nodes with the proper profile
  shell: |
      source {{ working_dir }}/stackrc;
      openstack baremetal node set --property capabilities='node:{{ node_name }},profile:{{ item[1].cmd.split() | last }},boot_option:local' {{ item[0].stdout }}

  vars:
    # note this is custom for our naming convention
    item_name: "{{ item[0].item.name | regex_replace('(.+?)-\\d', '\\1') }}"
    # with node_name we are trying to keep the original VM names linked to the
    # overcloud names, so we don't have to rewrite the inventory:
    # https://access.redhat.com/documentation/en-us/red_hat_openstack_platform/10/html/advanced_overcloud_customization/sect-controlling_node_placement
    # NOTE:  the names that "infrared virsh" creates MUST START AT ZERO for this to work
    # correctly, e.g. controller-0, controller-1, controller-2, compute-0
    node_name: "{{ item[0].item.name | regex_replace('(.+?-\\d)', '\\1') }}"
  tags: skip_ansible_lint
  when: "item[0].item.name is defined and item[1].cmd is defined and item_name in item[1].cmd"
  with_together:
      - "{{ node_list.results }}"
      - "{{ tagged_flavors | default([]) }}"


# NOTE: new flavor stuff in
# https://github.com/redhat-openstack/infrared/commit/842f997a443667791855e699a
# otherwise we get get no valid host found errors due to:
# https://review.openstack.org/#/c/565841
# "Ironic: report 0 for vcpus/memory_mb/disk_gb resources
# Ironic nodes should all be using resource classes for scheduling
# by now, which means reporting CPU/RAM/disk isn't useful.
# "Report these as zero so they cannot be scheduled." and indeed they are not

- name: Check if node name is not None
  shell: |
      source ~/stackrc
      openstack baremetal node list -c Name -f value|grep -zqvi None
  register: check_nodename
  failed_when: false
  changed_when: false

- name: Print resource-class debug message
  vars:
      message: |
          Currently custom resource class(es) is available only for the
          virtual deployment, since node name is used to associate custom
          resource class with it and when node name is 'None'
          scheduling based on resource class is skipping
  debug:
      msg: "{{ message.split('\n') }}"
  when: check_nodename.rc != 0

- block:
    - name: Set default resource-class parameters
      vars:
          # note this is custom for our naming convention
          name: "{{ item.name | regex_replace('(.+?)-\\d', '\\1') }}"

      set_fact:
          default_resource_class: "{{ default_resource_class | default([]) + [{ 'name': name, 'flavor': name, 'node': item.name }] }}"
      with_items: "{{ overcloud_facts.nodes | default([])}}"
      tags: skip_ansible_lint
      when:
          - "overcloud_facts.nodes[0].name is defined"

    - name: Merge default and override resource class parameters
      set_fact:
          resource_class: "{{ default_resource_class  }}"
          # infrared's --resource-class-override feature:
          # resource_class: "{{ default_resource_class + install.resource.class.get('override', []) }}"

    - name: Add resource class to flavor and node
      shell: |
          set -exo pipefail

          REGEX=".*-[0-9]+$"
          source ~/stackrc
          # Remove already exist custom resource class for flavor
          for rclass in $(openstack flavor show {{ item.flavor }} -f value -c properties | grep -o 'CUSTOM_[A-Z_]*'); do
              openstack flavor unset {{ item.flavor }} --property resources:${rclass}
          done

          openstack flavor set {{ item.flavor }} \
              --property resources:DISK_GB=0 \
              --property resources:MEMORY_MB=0 \
              --property resources:VCPU=0 \
              --property resources:CUSTOM_{{ item.name.replace('-', '_').upper() }}=1
          {% for node in item.node.split(':') %}
              if [[ "{{ node }}" =~ $REGEX ]]; then
                  openstack baremetal node set $(openstack baremetal node show {{ node }} -c uuid -f value) \
                  --resource-class {{ item.name }}
              else
                  openstack baremetal node list|awk '/{{ node }}/ {print $2}'| \
                  xargs -I{} openstack baremetal node set {} --resource-class {{ item.name }}
              fi
          {% endfor %}
      tags: skip_ansible_lint
      with_items: "{{ resource_class }}"
  when:
      - check_nodename.rc == 0
      - release_numeric_version | int >= 12

      # infrared's --resource-class-enabled flag
      # - install.resource.class.enabled

      # infrared's version check, we use release_numeric_version
      # - install.version|default(undercloud_version)|openstack_release >= 12


