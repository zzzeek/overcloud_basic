- name: config
  include_vars: "{{ playbook_dir }}/../config.yml"
  tags: always

- name: setup stack1-local variables
  set_fact:
    stack_name: 'stack1'
    stretch_galera_vip: "{{ stack1_stretch_galera_vip }}"
  when: "'stack1' in group_names"

- name: setup stack2-local variables
  set_fact:
    stack_name: 'stack2'
    stretch_galera_vip: "{{ stack2_stretch_galera_vip }}"
  when: "'stack2' in group_names"

- name: get galera-node specific information
  when: "'galera_nodes' in group_names"
  block:

    - name: Get transport IP
      shell: /sbin/ip -4 addr show {{ stretch_network_vlan_name }} | grep "inet\b" | awk '{print $2}' | cut -d/ -f1
      register: transport_ip_number_cmd

    - name: set transport IP fact
      set_fact:
         transport_ip_number: '{{ transport_ip_number_cmd.stdout }}'

    - name: get pacemaker node name
      shell: /usr/sbin/crm_node -n
      register: get_nodename_cmd

    - name: set pacemaker node name fact
      set_fact:
        pacemaker_node_name: '{{ get_nodename_cmd.stdout }}'

    - name: set master / follower ip numbers
      set_fact:
          master_ip: "{{ hostvars[galera_master_inventoryname]['transport_ip_number'] }}"
          follower_ip: "{{ hostvars[galera_follower_inventoryname]['transport_ip_number'] }}"

    - name: get docker image name for galera from already running DB
      shell: docker inspect galera-bundle-docker-0
      register: docker_inspect_cmd
      become: true

    - name: get galera image name
      set_fact: galera_image="{{ (docker_inspect_cmd.stdout | from_json)[0]['Config']['Image'] }}"

    - name: get docker image name for clustercheck already running
      shell: docker inspect clustercheck
      register: docker_inspect_cmd
      become: true

    - name: get clustercheck image name
      set_fact: clustercheck_image="{{ (docker_inspect_cmd.stdout | from_json)[0]['Config']['Image'] }}"

    - name: get mysql uid / gid
      docker_container:
        name: stretch_galera_cmd
        cleanup: true
        image: "{{ galera_image }}"
        command:  'bash -c  ''echo {\"uid\": `id mysql -u`, \"gid\": `id mysql -g`}'''
        detach: false
      register: mysql_id_cmd
      become: true

    - name: set mysql uid / gid facts
      set_fact:
        mysql_uid: "{{ (mysql_id_cmd.ansible_facts.docker_container.Output | from_json)['uid'] }}"
        mysql_gid: "{{ (mysql_id_cmd.ansible_facts.docker_container.Output | from_json)['gid'] }}"

    - name: get mysql root password from kolla config
      shell: cat /var/lib/config-data/puppet-generated/mysql/root/.my.cnf  | grep "password" | head -1 | sed -e 's/password="\(.*\)"/\1/'
      register: cat_kolla_pw_cmd

    - name: set mysql root password fact
      set_fact:
        mysql_root_password: "{{ cat_kolla_pwd_cmd.stdout }}"


