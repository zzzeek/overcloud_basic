# other way of doing this would be to get the insecure registry address
# and build up the name.   the two overclouds are using different undercloud
# and therefore different image, and the IP number is hardcoded in the image
# name so it's all separate

- name: create host mysql dir
  file:
    path: /var/lib/mysql-stretch
    state: directory
    owner: "{{ mysql_uid }}"
    group: "{{ mysql_gid }}"
  register: created_data_directory
  become: true

- name: create host mysql log dir
  file:
    path: /var/log/mysql-stretch
    state: directory
    owner: "{{ mysql_uid }}"
    group: "{{ mysql_gid }}"
  become: true

- name: set container volumes fact
  set_fact:
      galera_volumes:
        - /var/log/mysql-stretch:/var/log
        - /etc/hosts:/etc/hosts:ro
        - /var/lib/mysql-stretch:/var/lib/mysql:rw
        - /etc/localtime:/etc/localtime:ro
        - /dev/log:/dev/log:rw
        - /etc/pacemaker/authkey:/etc/pacemaker/authkey
        - /var/lib/kolla/config_files/mysql.json:/var/lib/kolla/config_files/config.json:ro
        - /var/lib/config-data/puppet-generated/mysql/:/var/lib/kolla/config_files/src:ro

- name: create mysql setup
  docker_container:
    name: stretch_galera_cmd
    cleanup: true
    image: "{{ galera_image }}"
    command: /bin/mysql_install_db --datadir=/var/lib/mysql --user=mysql
    volumes: "{{ galera_volumes }}"
    network_mode: host
    detach: false
  become: true
  when: created_data_directory.changed

# TODO: simple single master / single follower setup to start with.  we
# later would want this to be a little more open ended

- name: create gcomm address
  set_fact:
      gcomm_address: "gcomm://{{ master_ip }},{{ follower_ip }}"

- name: set master parameters
  set_fact:
      galera_parameters: >
          --bind-address={{ master_ip }} --wsrep-new-cluster
          --wsrep-provider-options=gmcast.listen_addr=tcp://{{ master_ip }}:4567;pc.weight=2
          --wsrep-sst-receive-address={{ master_ip }}
  when: inventory_hostname == "{{ galera_master_inventoryname }}"

- name: set follower parameters
  set_fact:
      galera_parameters: >
        --bind-address={{ follower_ip }}
        --wsrep-provider-options=gmcast.listen_addr=tcp://{{ follower_ip }}:4567;pc.weight=1
        --wsrep-sst-receive-address={{ follower_ip }}
  when: inventory_hostname != "{{ galera_master_inventoryname }}"

- name: open up iptables rule
  lineinfile:
    path: /etc/sysconfig/iptables
    insertafter: "-A INPUT .* 3306 .* -j ACCEPT"
    line: '-A INPUT -p tcp -m multiport --dports 3307 -m state --state NEW -m comment --comment "100 mysql_stretch_haproxy ipv4" -j ACCEPT'
  notify: reload iptables
  become: true

- name: ensure restart happens
  meta: flush_handlers

    
# TODO: this is an interim means of doing this until we get pacemaker
# to run the galera nodes here.    running the docker container straight here
# opens us up to data dir corruption if the container gets ungracefully
# stopped and restarted
- name: start galera!
  docker_container:
    name: stretch_galera
    image: "{{ galera_image }}"
    command: >
        /usr/bin/mysqld_safe --defaults-file=/etc/my.cnf --pid-file=/var/lib/mysql/mysqld.pid
        --socket=/var/lib/mysql/mysql.sock --datadir=/var/lib/mysql
        --port 3307
        --log-error=/var/log/mysqld.log --user=mysql --open-files-limit=16384
        --wsrep-cluster-address={{ gcomm_address }}
        {{ galera_parameters }}
    volumes: "{{ galera_volumes }}"
    network_mode: host
  become: true

- name: wait for it to run
  shell: docker exec stretch_galera mysql -u root -s --skip-column-names -e "show status like 'wsrep_local_state'"
  register: result
  until: result.stdout.find("4") != -1
  retries: 5
  delay: 5
  become: true
  any_errors_fatal: true

- name: set up a root user that can get there from the network
  shell: docker exec stretch_galera mysql -u root -e "GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION"
  become: true

