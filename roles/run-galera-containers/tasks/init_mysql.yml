- name: create gcomm address
  set_fact:
      gcomm_address: "gcomm://{{ master_ip }},{{ follower_ip }}"

- name: set master parameters
  set_fact:
      galera_bind_address: "{{ master_ip }}"
      galera_parameters: >-
          --bind-address={{ master_ip }}
          {{ (deploy_via_pacemaker|bool==false) | ternary("--wsrep-new-cluster", "") }}
          --wsrep-provider-options=gmcast.listen_addr=tcp://{{ master_ip }}:4567;pc.weight=2
          --wsrep-sst-receive-address={{ master_ip }}
      cluster_host_map: "stack1-overcloud-controller-0:{{ master_ip }};stack2-overcloud-controller-0:{{ follower_ip }}"
      remote_node_map: "stack2-overcloud-controller-0:root@{{ follower_ip }}"
  when: inventory_hostname == "{{ galera_master_inventoryname }}"

- name: set follower parameters
  set_fact:
      galera_bind_address: "{{ follower_ip }}"
      galera_parameters: >-
        --bind-address={{ follower_ip }}
        --wsrep-provider-options=gmcast.listen_addr=tcp://{{ follower_ip }}:4567;pc.weight=1
        --wsrep-sst-receive-address={{ follower_ip }}
      cluster_host_map: "stack1-overcloud-controller-0:{{ master_ip }};stack2-overcloud-controller-0:{{ follower_ip }}"
      remote_node_map: "stack1-overcloud-controller-0:root@{{ master_ip }}"
  when: inventory_hostname != "{{ galera_master_inventoryname }}"

- name: copy existing kolla config and modify
  include_tasks: create_kolla_config.yml

- name: create host mysql dir
  file:
    path: /var/lib/mysql-stretch
    state: directory
    owner: "{{ mysql_uid }}"
    group: "{{ mysql_gid }}"
  register: created_data_directory
  become: true

- name: create host mysql log dir
  file:
    path: /var/log/containers/mysql-stretch
    state: directory
    owner: "{{ mysql_uid }}"
    group: "{{ mysql_gid }}"
  become: true

- name: create host mariadb log dir
  file:
    path: /var/log/mariadb-stretch
    state: directory
    owner: "{{ mysql_uid }}"
    group: "{{ mysql_gid }}"
  become: true

- name: set up volumes
  set_fact:
      galera_volumes:
        - {
            "id": "stretch-galera-mysql-log",
            "source": "/var/log/containers/mysql-stretch",
            "target": "/var/log/mysql",
            "flags": "rw"
          }
        - {
            "id": "stretch-galera-mariadb-log",
            "source": "/var/log/mariadb-stretch",
            "target": "/var/log/mariadb",
            "flags": "rw"
          }
        - {
            "id": "stretch-galera-mysql-lib",
            "source": "/var/lib/mysql-stretch",
            "target": "/var/lib/mysql",
            "flags": "rw"
          }
        - {
            "id": "stretch-galera-cfg-files",
            "source": "/var/lib/kolla/config_files/mysql.json",
            "target": "/var/lib/kolla/config_files/config.json",
            "flags": "ro"
          }
        - {
            "id": "stretch-galera-cfg-data",
            "source": "/var/lib/config-data/puppet-generated/mysql-stretch/",
            "target": "/var/lib/kolla/config_files/src",
            "flags": "ro"
          }
        - {
            "id": "stretch-galera-hosts",
            "source": "/etc/hosts",
            "target": "/etc/hosts",
            "flags": "ro"
          }
        - {
            "id": "stretch-galera-localtime",
            "source": "/etc/localtime",
            "target": "/etc/localtime",
            "flags": "ro"
          }
        - {
            "id": "stretch-galera-mysql-dev-log",
            "source": "/dev/log",
            "target": "/dev/log",
            "flags": "rw"
          }
        - {
            "id": "stretch-galera-root-ssh",
            "source": "/root/.ssh",
            "target": "/root/.ssh",
            "flags": "ro"
          }

# assemble dictionary items into a list of strings. trivial in Python,
# impossible in jinja.  See three-year-old workaround:
# https://github.com/ansible/ansible/pull/8019#issuecomment-95480311
- name: render volume entries for docker
  set_fact: volume_string="{{ item['source'] }}:{{ item['target'] }}:{{ item['flags'] }}"
  with_items: "{{ galera_volumes }}"
  register: volume_string_result

- name: set container volumes fact
  set_fact:
      galera_docker_volumes: "{{ volume_string_result.results | map(attribute='ansible_facts.volume_string') | list }}"

- name: use the docker container to create mysql setup
  docker_container:
    name: stretch_galera_cmd
    cleanup: true
    image: "{{ stretch_galera_imagename }}"
    command: /setup_stretch_database.sh
    volumes: "{{ galera_docker_volumes }}"
    network_mode: host
    detach: false
  become: true


